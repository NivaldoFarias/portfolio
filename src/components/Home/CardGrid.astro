---
import type { RepositoryData } from "../../utils/github-api";

import Card from "./Card.astro";

import { api } from "../../utils/github-api";
import { defaultCards, selectOptions } from "../../data/card-grid";

const listUserRepos = await api.listUserRepos({
	per_page: 100,
	sort: "updated",
	direction: "desc",
});

const toRender = listUserRepos?.length
	? listUserRepos.filter((repo) => !repo.fork && !repo.private)
	: defaultCards;

declare type SortCriteria = (typeof selectOptions)[number]["value"];

function sortRepositories(criteria: SortCriteria) {
	const getSortValue = (repo: RepositoryData, criteria: SortCriteria) => {
		if (criteria.endsWith("_count") || criteria === "size") {
			return Number(repo[criteria]) ?? 0;
		} else if (criteria === "pushed_at") {
			return new Date(repo.pushed_at || 0).getTime() ?? 0;
		} else {
			return new Date(repo.updated_at || 0).getTime() ?? 0;
		}
	};

	toRender.sort(
		(a, b) =>
			getSortValue(b as RepositoryData, criteria) - getSortValue(a as RepositoryData, criteria),
	);
}
---

<>
	<div class="join flex justify-between">
		<div class="label join-item">
			<span class="label-text text-2xl">Sort repositories by</span>
		</div>
		<select
			class="select select-ghost select-lg join-item"
			id="sort-repos"
		>
			{
				selectOptions.map((option) => (
					<option
						value={option.value}
						selected={option.value === "updated_at"}
					>
						{option.label}
					</option>
				))
			}
		</select>
	</div>
	<ul
		role="list"
		id="card-grid"
		class="grid grid-cols-1 sm:grid-cols-2 p-0 min-h-[8rem] min-w-[16rem] link-card-grid gap-x-3 gap-y-8 mt-4"
	>
		{toRender.map((data) => <Card data={data} />)}
	</ul>
</>

<script type="module">
	console.log(document.getElementById("card-grid").childNodes);
</script>
