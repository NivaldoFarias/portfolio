---
import { Icon } from "astro-icon/components";

export interface Props {
	title: string;
	headings: { depth: number; value: string }[];
}

const { headings, title } = Astro.props;

const slugs = new Map<string, number>();
const parsed = headings
	.filter((h) => h.depth !== 6)
	.map((h) => {
		const slug = h.value
			.toLowerCase()
			.replace(/[^a-zA-Z0-9]+/g, "-")
			.replace(/(^-|-$)+/g, "");

		const count = slugs.get(slug) || 0;
		slugs.set(slug, count + 1);

		return {
			...h,
			slug: count > 0 ? `${slug}-${count}` : slug,
		};
	});

let hasRendered = new Set<string>();
---

<aside class="sticky hidden p-4 lg:block w-80 top-24">
	<ul class="menu">
		<li>
			<a
				class="flex items-center gap-2 py-2 pl-0 text-lg !cursor-default hover:!decoration-transparent"
			>
				<Icon
					aria-label={title}
					class="text-primary"
					name="fluent:text-align-left-24-filled"
					height="32"
					width="32"
				/>
				<span class="font-semibold opacity-80">Table of Contents</span>
			</a>
			<ul>
				{
					parsed.map((h) => {
						if (h.depth === 1 || hasRendered.has(h.slug)) return null;

						const HeadingWithNoChildren = (heading: typeof h) => {
							return (
								<li>
									<a
										href={`#${heading.slug}`}
										class="max-w-fit"
									>
										{heading.value}
									</a>
								</li>
							);
						};

						const getChildren = (parent: typeof h) => {
							const index = parsed.indexOf(parent);

							const next = parsed
								.slice(index + 1)
								.findIndex((child) => child.depth < parent.depth || child.depth === parent.depth);
							return next === -1 || next === index + 1
								? []
								: parsed.slice(index + 1, index + 1 + next);
						};

						hasRendered.add(h.slug);
						const children = getChildren(h);

						return (
							<li>
								<a
									href={`#${h.slug}`}
									class="flex items-center gap-2 opacity-80 hover:opacity-100"
								>
									<span class="font-semibold ">{h.value}</span>
								</a>
								{children.length > 0 ? (
									<ul>
										{children.map((h2) => {
											if (hasRendered.has(h2.slug)) return null;

											hasRendered.add(h2.slug);
											const children = getChildren(h2);
											if (children.length === 0) return HeadingWithNoChildren(h2);

											return (
												<details open>
													<summary>
														<a href={`#${h2.slug}`}>{h2.value}</a>
													</summary>
													<ul>
														{children.map((h3) => {
															if (hasRendered.has(h3.slug)) return null;

															hasRendered.add(h3.slug);
															const children = getChildren(h3);
															if (children.length === 0) return HeadingWithNoChildren(h3);

															return (
																<details>
																	<summary class="marker-alt">
																		<a href={`#${h3.slug}`}>{h3.value}</a>
																	</summary>
																	<ul>
																		{children.map((h4) => {
																			if (hasRendered.has(h4.slug)) return null;

																			hasRendered.add(h4.slug);
																			return HeadingWithNoChildren(h4);
																		})}
																	</ul>
																</details>
															);
														})}
													</ul>
												</details>
											);
										})}
									</ul>
								) : null}
							</li>
						);
					})
				}
			</ul>
		</li>
		<div class="divider"></div>
		<li>
			<a class="flex items-center gap-2 py-2 pl-0 text-lg !cursor-default">
				<Icon
					aria-label="Customize"
					name="ion:sparkles"
					height="24"
					width="24"
					class="text-secondary"
				/>
				<span class="font-semibold opacity-80">Customize</span>
			</a>
			<ul>
				<li><a>Sidebar Item 6</a></li>
				<li><a>Sidebar Item 7</a></li>
			</ul>
		</li>
	</ul>
</aside>
